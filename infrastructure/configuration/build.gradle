buildscript {
    ext {
        kotlinVersion = '1.3.10'
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    baseName = 'infrastructure'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories { mavenCentral() }

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}


configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

dependencies {
    compile project(':infrastructure:entrypoint')
    compile project(':infrastructure:dataprovider')

    testCompile "org.testcontainers:testcontainers:1.4.3"
    testCompile "org.testng:testng:6.14.3"
}


// -- integration test task -- //
sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/kotlin')
        }
        resources.srcDir file('src/test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    useTestNG {
        suites 'src/test/resources/testng.xml'
    }
}

check.dependsOn integrationTest
// -- integration test task -- //

compileIntegrationTestKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

integrationTest {

    useTestNG()
    include '**/*IT.*'

    // make gradle print the test result for each test in the build (we like to see the acceptance tests running)
    testLogging {
        events "passed", "skipped", "failed"
    }

    doFirst {
        println "==========================================================================================="
        println ">>> integration-test starting"
        println "==========================================================================================="
    }


    doLast {
        println "==========================================================================================="
        println ">>> integration-test finishing"
        println "==========================================================================================="
    }
}

integrationTest.mustRunAfter(":infrastructure:dataprovider:test")